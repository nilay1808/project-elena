{"version":3,"sources":["components/UserInput.js","components/RouteData.js","components/MapView.js","components/ErrorModal.js","App.js","index.js"],"names":["UserInput","state","start","dest","goal","limit","algorithm","method","handleChange","e","setState","target","id","value","handleSubmit","preventDefault","updateLoading","fetch","body","JSON","stringify","then","res","a","status","json","Error","error","data","props","updateData","loading","catch","err","updateErrorMsg","toString","Card","style","width","background","color","marginTop","marginLeft","Form","onSubmit","Row","Group","as","Col","controlId","Label","Control","type","placeholder","this","onChange","hidden","className","Button","variant","Spinner","animation","Component","options","scales","xAxes","ticks","display","legendOpts","testData","labels","datasets","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","datas","finalDistance","maxGrade","averageGrade","totalElevationGain","RouteData","update","dataPoints","length","path","path_data","elevData","total_Dist","i","long","lat","dist","grade","elev","elevation","push","opacity","toFixed","legend","MapView","renderColor","item","min","max","perc","r","g","Math","round","perc2color","pinLayers","pathLayers","d","min_grade","Number","POSITIVE_INFINITY","max_grade","NEGATIVE_INFINITY","pinData","name","coordinates","newData","slice","newLayer","PathLayer","String","pickable","widthScale","widthMinPixels","getColor","IconLayer","getIcon","url","height","anchorY","sizeScale","getPosition","getSize","top","left","zIndex","viewState","viewport","onViewStateChange","v","_onViewStateChange","controller","layers","mapStyle","onViewportChange","mapboxApiAccessToken","React","ErrorModal","Modal","show","showError","Header","Title","Body","errorMsg","Footer","onClick","clearError","App","resp","len","floor","zoom","calculateZoom","FlyToInterpolator","updateHeight","msg","bool","end","haversine","console","log","lat1","lon1","lat2","lon2","φ1","PI","φ2","Δφ","Δλ","sin","cos","atan2","sqrt","latitude","longitude","bearing","pitch","bind","position","alignItems","Navbar","Brand","Nav","Link","href","borderLeft","payload","right","ReactDOM","render","document","getElementById"],"mappings":"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","file":"js/main.858d02ab.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport Col from \"react-bootstrap/Col\";\nimport Card from \"react-bootstrap/Card\";\nimport Spinner from \"react-bootstrap/Spinner\";\n\nexport default class UserInput extends Component {\n\tstate = {\n\t\tstart: \"\",\n\t\tdest: \"\",\n\t\tgoal: \"Minimize Elevation Gain\",\n\t\tlimit: \"0\",\n\t\talgorithm: \"AStar\",\n\t\tmethod: \"drive\",\n\t};\n\n\t/**\n        Sets the state to the value based on the given parameter.\n\n\t \tArguments\n\t \t----------\n\t \te: Event Object\n\t \t\tAn event object that contains the name of a state and the value it is being set to.\n\n     **/\n\thandleChange = (e) => {\n\t\tthis.setState({\n\t\t\t[e.target.id]: e.target.value,\n\t\t});\n\t};\n\n\t/**\n        Listens for submit button to be pushed fetches the data from the backend. Calls the updateData method from app.js\n     **/\n\thandleSubmit = (e) => {\n\t\te.preventDefault();\n\t\t// console.log(this.state);\n\t\t// this.setState({ loading: true });\n\t\tthis.updateLoading();\n\n\t\tfetch(\"/route\", {\n\t\t\tmethod: \"POST\",\n\t\t\tbody: JSON.stringify(this.state),\n\t\t})\n\t\t\t.then(async (res) => {\n\t\t\t\tif (res.status !== 200){\n\t\t\t\t\tlet json = await res.json()\n\t\t\t\t\tthrow new Error(json.error)\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\tlet data = await res.json();\n\t\t\t\tthis.props.updateData(data);\n\t\t\t\tthis.setState({ loading: false });\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((err) => {\n\t\t\t\t// console.log(err);\n\t\t\t\tthis.props.updateErrorMsg(err.toString())\n\t\t\t});\n\t};\n\n\t/**\n        Calls the updateLoading method in app.js\n     **/\n\tupdateLoading = () => {\n\t\tthis.props.updateLoading()\n\t};\n\n\t/**\n        Renders the react components to the screen. In particular, the User Input component.\n\n\t \tReturns\n\t \t----------\n\t \tThe HTML formatted React components to be rendered\n\n     **/\n\trender() {\n\t\treturn (\n\t\t\t<Card\n\t\t\t\tbody\n\t\t\t\tstyle={{\n\t\t\t\t\twidth: \"400px\",\n\t\t\t\t\tbackground: \"rgba(0, 0, 0, 0.5)\",\n\t\t\t\t\tcolor: \"#ffffff\",\n\t\t\t\t\tmarginTop: \"2.5%\",\n\t\t\t\t\tmarginLeft: \"5%\",\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<Form\n\t\t\t\t\tonSubmit={(e) => {\n\t\t\t\t\t\tthis.handleSubmit(e);\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t<Form.Row>\n\t\t\t\t\t\t<Form.Group as={Col} controlId=\"start\">\n\t\t\t\t\t\t\t<Form.Label>Start Location</Form.Label>\n\t\t\t\t\t\t\t<Form.Control\n\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\tplaceholder=\"Enter start location\"\n\t\t\t\t\t\t\t\tvalue={this.state.start}\n\t\t\t\t\t\t\t\tonChange={(e) => {\n\t\t\t\t\t\t\t\t\tthis.handleChange(e);\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</Form.Group>\n\t\t\t\t\t</Form.Row>\n\n\t\t\t\t\t<Form.Row>\n\t\t\t\t\t\t<Form.Group as={Col} controlId=\"dest\">\n\t\t\t\t\t\t\t<Form.Label>End Location</Form.Label>\n\t\t\t\t\t\t\t<Form.Control\n\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\tplaceholder=\"Enter end location\"\n\t\t\t\t\t\t\t\tvalue={this.state.dest}\n\t\t\t\t\t\t\t\tonChange={(e) => {\n\t\t\t\t\t\t\t\t\tthis.handleChange(e);\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</Form.Group>\n\t\t\t\t\t</Form.Row>\n\n\t\t\t\t\t<Form.Row>\n\t\t\t\t\t\t<Form.Group as={Col} controlId=\"algorithm\">\n\t\t\t\t\t\t\t<Form.Label>Algorithm</Form.Label>\n\t\t\t\t\t\t\t<Form.Control\n\t\t\t\t\t\t\t\tas=\"select\"\n\t\t\t\t\t\t\t\tvalue={this.state.algorithm}\n\t\t\t\t\t\t\t\tonChange={(e) => {\n\t\t\t\t\t\t\t\t\tthis.handleChange(e);\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{/* <option>Uniform Cost Search</option> */}\n\t\t\t\t\t\t\t\t<option>AStar</option>\n\t\t\t\t\t\t\t\t{/* <option>AStar (Old)</option> */}\n\t\t\t\t\t\t\t\t<option>Breadth First Search</option>\n\t\t\t\t\t\t\t\t<option>Dijkstra</option>\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t</Form.Control>\n\t\t\t\t\t\t</Form.Group>\n\t\t\t\t\t</Form.Row>\n\n\t\t\t\t\t<Form.Row hidden={this.state.algorithm === 'Breadth First Search'}>\n\t\t\t\t\t\t<Form.Group as={Col} controlId=\"goal\">\n\t\t\t\t\t\t\t<Form.Label>Optimization</Form.Label>\n\t\t\t\t\t\t\t<Form.Control\n\t\t\t\t\t\t\t\tas=\"select\"\n\t\t\t\t\t\t\t\tvalue={this.state.goal}\n\t\t\t\t\t\t\t\tonChange={(e) => {\n\t\t\t\t\t\t\t\t\tthis.handleChange(e);\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<option>Minimize Elevation Gain</option>\n\t\t\t\t\t\t\t\t<option>Maximize Elevation Gain</option>\n\t\t\t\t\t\t\t\t<option>Maximize Steepness</option>\n\t\t\t\t\t\t\t\t<option>Minimize Steepness</option>\n\t\t\t\t\t\t\t</Form.Control>\n\t\t\t\t\t\t</Form.Group>\n\t\t\t\t\t</Form.Row>\n\n\t\t\t\t\t<Form.Row hidden={this.state.algorithm === 'Breadth First Search'}>\n\t\t\t\t\t\t<Form.Group as={Col} controlId=\"limit\">\n\t\t\t\t\t\t\t<Form.Label>Deviation Limit (x%)</Form.Label>\n\t\t\t\t\t\t\t<Form.Control\n\t\t\t\t\t\t\t\ttype=\"number\"\n\t\t\t\t\t\t\t\tplaceholder=\"x%\"\n\t\t\t\t\t\t\t\tvalue={this.state.limit}\n\t\t\t\t\t\t\t\tonChange={(e) => {\n\t\t\t\t\t\t\t\t\tthis.handleChange(e);\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</Form.Group>\n\t\t\t\t\t</Form.Row>\n\n\t\t\t\t\t<Form.Row>\n\t\t\t\t\t\t<Form.Group as={Col} controlId=\"method\">\n\t\t\t\t\t\t\t<Form.Label>Transportation Method</Form.Label>\n\t\t\t\t\t\t\t<Form.Control\n\t\t\t\t\t\t\t\tas=\"select\"\n\t\t\t\t\t\t\t\t// disabled\n\t\t\t\t\t\t\t\tvalue={this.state.method}\n\t\t\t\t\t\t\t\tonChange={(e) => {\n\t\t\t\t\t\t\t\t\tthis.handleChange(e);\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<option>drive</option>\n\t\t\t\t\t\t\t\t<option>bike</option>\n\t\t\t\t\t\t\t\t<option>walk</option>\n\t\t\t\t\t\t\t</Form.Control>\n\t\t\t\t\t\t</Form.Group>\n\t\t\t\t\t</Form.Row>\n\t\t\t\t\t<Form.Row className=\"justify-content-md-center\">\n\t\t\t\t\t\t<Button variant=\"light\" type=\"submit\">\n\t\t\t\t\t\t\t{this.props.loading ? (\n\t\t\t\t\t\t\t\t<Spinner animation=\"border\" />\n\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\"Submit\"\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</Form.Row>\n\t\t\t\t</Form>\n\t\t\t</Card>\n\t\t);\n\t}\n}\n","import React, { Component } from \"react\";\n\nimport Form from \"react-bootstrap/Form\";\nimport Col from \"react-bootstrap/Col\";\nimport Card from \"react-bootstrap/Card\";\nimport { Line } from \"react-chartjs-2\";\n\n/*\n    Options and configurations for the Chart.js graph\n */\nconst options = {\n\tscales: {\n\t\txAxes: [\n\t\t\t{\n\t\t\t\tticks: {\n\t\t\t\t\tdisplay: false, //this will remove only the label\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t},\n};\n\nconst legendOpts = {\n\tdisplay: false,\n};\n\nconst testData = {\n\tlabels: [],\n\tdatasets: [\n\t\t{\n\t\t\tlabel: \"\",\n\t\t\tfill: false,\n\t\t\tlineTension: 0.1,\n\t\t\tbackgroundColor: \"rgba(75,192,192,0.4)\",\n\t\t\tborderColor: \"rgba(75,192,192,1)\",\n\t\t\tborderCapStyle: \"butt\",\n\t\t\tborderDash: [],\n\t\t\tborderDashOffset: 0.0,\n\t\t\tborderJoinStyle: \"miter\",\n\t\t\tpointBorderColor: \"rgba(75,192,192,1)\",\n\t\t\tpointBackgroundColor: \"#fff\",\n\t\t\tpointBorderWidth: 1,\n\t\t\tpointHoverRadius: 5,\n\t\t\tpointHoverBackgroundColor: \"rgba(75,192,192,1)\",\n\t\t\tpointHoverBorderColor: \"rgba(220,220,220,1)\",\n\t\t\tpointHoverBorderWidth: 2,\n\t\t\tpointRadius: 1,\n\t\t\tpointHitRadius: 10,\n\t\t\tdata: [10, 11],\n\t\t},\n\t],\n};\n\nlet datas = [];\nlet finalDistance = 0;\nlet maxGrade = 0;\nlet averageGrade = 0;\nlet totalElevationGain = 0;\nexport default class RouteData extends Component {\n\n    /**\n        Calculates statistics that will be displayed\n\n        Arguments\n        ----------\n        dataPoints: The json object that was passed to the frontend from the backend.\n\n     **/\n    update = (dataPoints) => {\n        \n        finalDistance = 0;\n        averageGrade = 0;\n        totalElevationGain = 0;\n\n        if (dataPoints.length === 0) {\n            return\n        }\n        // data[0].path is [[long, lat]]\n        // data[0].path_data is [{elevation, length}]\n        let path = dataPoints[0].path;\n        let path_data = dataPoints[0].path_data;\n\n        let label = [];\n        let elevData = [];\n        let total_Dist = 0;\n        maxGrade = 0;\n\n        for (let i = 0; i < path.length; i++) {\n\n            let long = path[i][0];\n            let lat = path[i][1];\n            let dist = path_data[i].length;\n            let grade = path_data[i].grade;\n            let elev = path_data[i].elevation;\n\n            total_Dist += dist;\n            if (grade > maxGrade) {\n                maxGrade = grade;\n            }\n\n            if (i !== path.length - 1) {\n                averageGrade += grade;\n                if ((path_data[i+1].elevation - elev) > 0){\n                    totalElevationGain += (path_data[i+1].elevation - elev);\n                }\n            }\n            \n\n            label.push(lat + \", \" + long);\n            elevData.push(elev);\n        }\n\n        // console.log(elevData, testData.datasets[0].data);\n\n        testData.labels = label;\n        testData.datasets[0].data = elevData;\n        averageGrade /= path.length;\n        finalDistance = total_Dist;\n    };\n\n    /**\n        Renders the react components to the screen. In particular, the statistics component.\n\n\t \tReturns\n\t \t----------\n\t \tThe HTML formatted React components to be rendered\n\n     **/\n    render() {\n\n\n        let dataPoints = this.props.data;\n\n        // Only update data if it is new\n        if (dataPoints !== datas) {\n            this.update(dataPoints);\n            datas = dataPoints;\n        }\n\n\n        return (\n\n            // This makes it so that the statistics page only shows when there's a path drawn on screen\n            <Card\n                body\n                style={finalDistance === 0 ?\n                    {\n                        width: \"350px\",\n                        background: \"rgba(0, 0, 0, 0.5)\",\n                        color: \"#ffffff\",\n                        marginTop: \"5%\",\n                        marginLeft: \"5%\",\n                        opacity: 0\n                    } : {\n                        width: \"350px\",\n                        background: \"rgba(0, 0, 0, 0.75)\",\n                        color: \"#ffffff\",\n                        marginTop: \"5%\",\n                        marginLeft: \"5%\",\n                        opacity: 100\n                    }}\n            >\n                <Form>\n                    <Form.Row>\n                        <Form.Group as={Col}\n                                    controlId=\"totalDist\">\n                            <Form.Label>Total Distance</Form.Label>\n                            <br/>\n                            <Form.Label>{(finalDistance/1000).toFixed(3)} Kilometers</Form.Label>\n                        </Form.Group>\n                    </Form.Row>\n\n                    <Form.Row>\n                        <Form.Group as={Col} controlId=\"dest\">\n                            <Form.Label>Steepest Incline</Form.Label>\n                            <br/>\n                            <Form.Label>{(maxGrade * 10).toFixed(3)} Vertical Meters per 10 Meters</Form.Label>\n                        </Form.Group>\n                    </Form.Row>\n\n                     <Form.Row>\n                        <Form.Group as={Col} controlId=\"dest\">\n                            <Form.Label>Total Elevation Gain</Form.Label>\n                            <br/>\n                            <Form.Label>{totalElevationGain} Meters</Form.Label>\n                        </Form.Group>\n                    </Form.Row>\n\n                    <Form.Row>\n                        <Form.Group as={Col} controlId=\"dest\">\n                            <Form.Label>Average Incline</Form.Label>\n                            <br/>\n                            <Form.Label>{(averageGrade * 10).toFixed(3)} Vertical Meters per 10 Meters</Form.Label>\n                        </Form.Group>\n                    </Form.Row>\n\n                    <Form.Row>\n                        <Form.Group as={Col} controlId=\"graph\">\n                            <Form.Label>Elevation Graph</Form.Label>\n                            <Line data={testData} legend={legendOpts} options={options}/>\n                        </Form.Group>\n                    </Form.Row>\n                </Form>\n            </Card>\n        );\n    }\n}\n","import React from \"react\";\nimport DeckGL from \"@deck.gl/react\";\nimport { PathLayer, IconLayer } from \"@deck.gl/layers\";\nimport { StaticMap } from \"react-map-gl\";\n\n// Mapbox access token here\nconst MAPBOX_TOKEN =\n\t\"pk.eyJ1IjoibmlsYXkxODA4IiwiYSI6ImNrOG1iaXp0cjBkeTEzZm12N3l3ODJweWEifQ.TDhSzGcCsjt5CsVRljpcrw\";\n\nexport default class MapView extends React.Component {\n\t/**\n        Renders the react components to the screen. In particular, the Map and its data.\n\n\t \tReturns\n\t \t----------\n\t \tThe HTML formatted React components to be rendered\n\n     **/\n\trender() {\n\t\tconst data = this.props.data;\n\n\t\t/**\n\t\t\tConverts grade percent to the color it represents\n\n\t\t \tArguments\n\t\t \t----------\n\t\t \tperc: Float\n\t\t \t\tThe grade percent.\n\n\t \t\tReturns\n\t \t\t----------\n\t \t\tAn array of the red, green, and blue values of the color.\n\n     \t**/\n\t\tfunction perc2color(perc) {\n\t\t\tlet r, g, b = 0;\n\t\t\tif (perc < 50) {\n\t\t\t\tg = 255;\n\t\t\t\tr = Math.round(5.1 * perc);\n\t\t\t} else {\n\t\t\t\tr = 255;\n\t\t\t\tg = Math.round(510 - 5.1 * perc);\n\t\t\t}\n\t\t\treturn [r, g, b];\n\t\t}\n\n\t\t/**\n\t\t\tCreates the render color that an edge will have\n\n\t\t \tArguments\n\t\t \t----------\n\t\t \titem: JSON object\n\t\t \t\tItem sent from backend containing the path data\n\t\t \tmin: Float\n\t\t \t\tThe minimum grade in the path\n\t\t \tmax: Float\n\t\t \t\tThe maximum grade in the path\n\n\t \t\tReturns\n\t \t\t----------\n\t \t\tThe result of perc2color(grade_percent).\n\n     \t**/\n\t\tconst renderColor = (item, min, max) => {\n\t\t\t// get max and min grades\n\t\t\tlet grade = item.path_data[0].grade; // between max and min\n\t\t\tlet grade_percent = (grade - min) * 100 / (max - min);\n\t\t\treturn perc2color(grade_percent)\n\t\t};\n\n\t\t// Calculating the maximum and minimum grade in the path\n\t\tconst pinLayers = [];\n\t\tconst pathLayers = [];\n\t\tif (data[0] && data[0].path){\n\t\t\tlet d = data[0];\n\t\t\tlet min_grade = Number.POSITIVE_INFINITY;\n\t\t\tlet max_grade = Number.NEGATIVE_INFINITY;\n\t\t\tfor (let path of d.path_data){\n\t\t\t\tif (path.grade < min_grade){\n\t\t\t\t\tmin_grade = path.grade\n\t\t\t\t}\n\t\t\t\tif (path.grade > max_grade){\n\t\t\t\t\tmax_grade = path.grade\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Adding the start and end coordinates as pin markers\n\t\t\tfor (let i = 0; i < d.path.length; i++){\n\t\t\t\tif (i === 0){\n\t\t\t\t\tconst pinData = {\n\t\t\t\t\t\tname: \"Start\",\n\t\t\t\t\t\tcoordinates: d.path[i]\n\t\t\t\t\t};\n\t\t\t\t\tpinLayers.push(pinData)\n\t\t\t\t}\n\t\t\t\telse if (i === d.path.length - 1){\n\t\t\t\t\tconst pinData = {\n\t\t\t\t\t\tname: \"Destination\",\n\t\t\t\t\t\tcoordinates: d.path[i]\n\t\t\t\t\t};\n\t\t\t\t\tpinLayers.push(pinData);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t// Creating a new layer for each edge with the appropriate color representing the grade of that edge\n\t\t\t\tlet newData = [{color: d.color, name: d.name, path: d.path.slice(i, i+2), path_data: d.path_data.slice(i, i+2)}];\n\t\t\t\tconst newLayer = new PathLayer({\n\t\t\t\t\tid: \"path-layer\" + String(i),\n\t\t\t\t\tdata: newData,\n\t\t\t\t\tpickable: true,\n\t\t\t\t\twidthScale: 5,\n\t\t\t\t\twidthMinPixels: 2,\n\t\t\t\t\tgetColor: (item) => renderColor(item, min_grade, max_grade),\n\t\t\t\t});\n\t\t\t\tpathLayers.push(newLayer);\n\t\t\t}\n\t\t}\n\n\t\t// Adding the pin icons\n\t\tfor (let i = 0; i < 2; i++){\n\t\t\tpinLayers[i] = new IconLayer({\n\t\t\t\tid: \"pin-layer\",\n\t\t\t\tdata:pinLayers[i],\n\t\t\t\tpickable: true,\n\t\t\t\t// iconAtlas and iconMapping are required\n\t\t\t\t// getIcon: return a string\n\t\t\t\tgetIcon: d => ({\n\t\t\t\t\turl: \"https://img.icons8.com/color/50/000000/map-pin.png\",\n\t\t\t\t\twidth: 128,\n\t\t\t\t\theight: 128,\n\t\t\t\t\tanchorY: 128\n\t\t\t\t  }),\n\t\t\t\n\t\t\t\t//getIcon: d => 'marker',\n\t\n\t\t\t\tsizeScale: 15,\n\t\t\t\tgetPosition: d => d.coordinates,\n\t\t\t\tgetSize: d => 5,\n\t\t\t\t// getColor: d => [d.name=='Start' ? 255 : 0, d.name=='Destination' ? 255 : 0, 0],\n\t\t\t});\n\t\t}\n\t\t\n\n\t\tlet style = {\n\t\t\ttop: \"auto\",\n\t\t\tleft: \"auto\",\n\t\t\tzIndex: \"0\",\n\t\t\tmarginTop: this.props.marginTop,\n\t\t};\n\n\t\treturn (\n\t\t\t<DeckGL\n\t\t\t\t// initialViewState={this.props.viewport}\n\t\t\t\tviewState={this.props.viewport}\n\t\t\t\tonViewStateChange={(v) => {\n\t\t\t\t\tthis.props._onViewStateChange(v);\n\t\t\t\t}}\n\t\t\t\tcontroller={true}\n\t\t\t\tlayers={ [...pathLayers, ...pinLayers]}\n\t\t\t\twidth={this.props.width}\n\t\t\t\theight={this.props.height}\n\t\t\t\tstyle={style}\n\t\t\t>\n\t\t\t\t<StaticMap\n\t\t\t\t\tmapStyle=\"mapbox://styles/mapbox/dark-v10\"\n\t\t\t\t\tonViewportChange={(viewport) => this.setState({ viewport })}\n\t\t\t\t\tmapboxApiAccessToken={MAPBOX_TOKEN}\n\t\t\t\t/>\n\t\t\t</DeckGL>\n\t\t);\n\t}\n}\n","import React, { Component } from \"react\";\n\nimport Modal from \"react-bootstrap/Modal\";\nimport Button from \"react-bootstrap/Button\";\n\nexport default class ErrorModal extends Component {\n\t/**\n        Renders the react components to the screen. In particular, the error modal.\n\n\t \tReturns\n\t \t----------\n\t \tThe HTML formatted React components to be rendered\n\n     **/\n\trender() {\n\t\treturn (\n\t\t\t<Modal show={this.props.showError}>\n\t\t\t\t<Modal.Header>\n\t\t\t\t\t<Modal.Title>Error</Modal.Title>\n\t\t\t\t</Modal.Header>\n\n\t\t\t\t<Modal.Body>\n\t\t\t\t\t<p>{this.props.errorMsg}</p>\n\t\t\t\t</Modal.Body>\n\n\t\t\t\t<Modal.Footer>\n\t\t\t\t\t<Button variant=\"danger\" onClick={() => {\n\t\t\t\t\t\tthis.props.clearError()\n\t\t\t\t\t}}>Close</Button>\n\t\t\t\t</Modal.Footer>\n\t\t\t</Modal>\n\t\t);\n\t}\n}\n","import React, { Component } from \"react\";\nimport \"./styles/App.css\";\n\nimport UserInput from \"./components/UserInput\";\nimport RouteData from \"./components/RouteData\";\nimport MapView from \"./components/MapView\";\nimport ErrorModal from \"./components/ErrorModal\";\n\nimport { FlyToInterpolator } from \"@deck.gl/core\";\n\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Nav from \"react-bootstrap/Nav\";\n\nclass App extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tdata: [],\n\t\t\tviewport: {\n\t\t\t\tlatitude: 42.20515744581611,\n\t\t\t\tlongitude: -72.19204888633023,\n\t\t\t\tzoom: 7.5,\n\t\t\t\tbearing: 0,\n\t\t\t\tpitch: 0,\n\t\t\t},\n\t\t\theight: \"99vh\",\n\t\t\twidth: \"100vw\",\n\t\t\tmarginTop: \"1vh\",\n\t\t\terrorMsg: \"No errors\",\n\t\t\tshowError: false,\n\t\t\tloading: false\n\t\t};\n\t\tthis._onViewStateChange = this._onViewStateChange.bind(this);\n\t}\n\n\t/**\n        Updates the viewport, loading screen, and the height of the map\n\n        Arguments\n        ----------\n        d: HTTP Response\n\t \t\tThe HTTP Response from the backend\n\n     **/\n\tupdateData = (d) => {\n\t\tconst resp = [];\n\t\tresp.push(d);\n\t\tthis.setState({ data: resp });\n\n\t\tlet len = Math.max(Math.floor((d.path.length - 1) / 2), 0);\n\t\tconst coordinates = d.path[len];\n\t\tlet viewport = this.state.viewport;\n\n\t\tlet zoom = this.calculateZoom(d.path);\n\n\t\tviewport[\"latitude\"] = coordinates[1];\n\t\tviewport[\"longitude\"] = coordinates[0];\n\t\tviewport[\"zoom\"] = zoom;\n\t\tviewport[\"transitionDuration\"] = 5000;\n\t\tviewport[\"transitionInterpolator\"] = new FlyToInterpolator();\n\n\t\tthis.setState({ viewport: viewport });\n\n\t\tthis.updateLoading();\n\n\t\t// Required to update viewport\n\t\tthis.updateHeight();\n\t};\n\n\t/**\n        Listens for a state change from the viewport and sets it's state\n\n        Arguments\n        ----------\n        viewState: Viewport\n\t \t\tThe updated viewport\n\n     **/\n\t_onViewStateChange({ viewState }) {\n\t\tthis.setState({ viewport: viewState });\n\t}\n\n\t/**\n        Updates the height. This is required to update the viewport correctly.\n     **/\n\tupdateHeight = () => {\n\t\tif (this.state.height === \"100vh\") {\n\t\t\tthis.setState({ height: \"99vh\", marginTop: \"1vh\" });\n\t\t} else {\n\t\t\tthis.setState({ height: \"100vh\", marginTop: \"0vh\" });\n\t\t}\n\t};\n\n\t/**\n        Update the error message and shows the error dialog.\n\n        Arguments\n        ----------\n        msg: String\n\t \t\tThe error message.\n\n     **/\n\tupdateErrorMsg = (msg) => {\n\t\tthis.setState({ errorMsg: msg, showError: true });\n\t};\n\n\t/**\n        Toggles the loading screen.\n     **/\n\tupdateLoading = () => {\n\t\tlet bool = this.state.loading;\n\t\tthis.setState({ loading: !bool });\n\t};\n\n\t/**\n        Removes the error and hides the error dialog.\n     **/\n\tclearError = () => {\n\t\tthis.setState({ errorMsg: \"No errors\", showError: false });\n\t\tthis.updateLoading()\n\t};\n\n\t/**\n        Calculates the proper map zoom level based on the haversine formula for the path length\n\n        Arguments\n        ----------\n        path: [[long, lat]]\n\t \t\tThe path to be displayed\n\n\t \tReturns\n\t \t----------\n\t \tThe calculated zoom level.\n\n     **/\n\tcalculateZoom = (path) => {\n\t\tlet start = path[0];\n\t\tlet end = path[path.length - 1];\n\n\t\tlet dist = this.haversine(start[1], start[0], end[1], end[0]);\n\n\t\tconsole.log(\"dist: \" + dist);\n\n\t\tif (dist <= 1500) {\n\t\t\treturn 14;\n\t\t}\n\t\tif (dist <= 5000) {\n\t\t\treturn 12;\n\t\t}\n\t\tif (dist <= 15000) {\n\t\t\treturn 11.5;\n\t\t}\n\t\tif (dist <= 35000) {\n\t\t\treturn 11;\n\t\t}\n\t\tif (dist <= 65000) {\n\t\t\treturn 10;\n\t\t}\n\t\treturn 8;\n\t};\n\n\t/**\n        Calculates haversine formula for the great-circle distance between two points on the earth\n\n        Arguments\n        ----------\n        lat1: Float\n\t \t\tLatitude of the first node.\n\t \tlon1: Float\n\t \t\tLongitude of the first node.\n\t \tlat2: Float\n\t \t\tLatitude of the second node.\n\t \tlong2: Float\n\t \t\tLongitude of the second node.\n\n\t \tReturns\n\t \t----------\n\t \td: The haversine distance between the two points.\n\n     **/\n\thaversine = (lat1, lon1, lat2, lon2) => {\n\t\tlet R = 6371e3; // metres\n\t\tlet φ1 = (lat1 * Math.PI) / 180;\n\t\tlet φ2 = (lat2 * Math.PI) / 180;\n\t\tlet Δφ = ((lat2 - lat1) * Math.PI) / 180;\n\t\tlet Δλ = ((lon2 - lon1) * Math.PI) / 180;\n\n\t\tlet a =\n\t\t\tMath.sin(Δφ / 2) * Math.sin(Δφ / 2) +\n\t\t\tMath.cos(φ1) * Math.cos(φ2) * Math.sin(Δλ / 2) * Math.sin(Δλ / 2);\n\t\tlet c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n\n\t\tlet d = R * c;\n\n\t\treturn d;\n\t};\n\n\t/**\n        Renders the react components to the screen.\n\n\t \tReturns\n\t \t----------\n\t \tThe HTML formatted React components to be rendered\n\n     **/\n\trender() {\n\t\treturn (\n\t\t\t<div\n\t\t\t\tclassName=\"App\"\n\t\t\t\tstyle={{\n\t\t\t\t\tbackground: \"rgb(23, 24, 24)\",\n\t\t\t\t\tposition: \"relative\",\n\t\t\t\t\talignItems: \"bottom\",\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<div style={{ zIndex: 0, position: \"absolute\" }}>\n\t\t\t\t\t<MapView\n\t\t\t\t\t\tdata={this.state.data}\n\t\t\t\t\t\tviewport={this.state.viewport}\n\t\t\t\t\t\t_onViewStateChange={this._onViewStateChange}\n\t\t\t\t\t\theight={this.state.height}\n\t\t\t\t\t\twidth={this.state.width}\n\t\t\t\t\t\tmarginTop={this.state.marginTop}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<div style={{ zIndex: 9, height: \"100vh\" }}>\n\t\t\t\t\t<Navbar\n\t\t\t\t\t\tvariant=\"dark\"\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\theight: \"8vh\",\n\t\t\t\t\t\t\tbackground: \"rgba(0, 0, 0, 0.5)\",\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tclassName=\"ml-auto\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<Navbar.Brand style={{ marginLeft: \"15px\" }}>\n\t\t\t\t\t\t\tEleNa: Elevation-based Navigation\n\t\t\t\t\t\t</Navbar.Brand>\n\t\t\t\t\t\t<Nav className=\"ml-auto\">\n\t\t\t\t\t\t\t<Nav.Link\n\t\t\t\t\t\t\t\thref=\"https://github.com\"\n\t\t\t\t\t\t\t\tstyle={{ borderLeft: \"solid 1px grey\" }}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tGithub\n\t\t\t\t\t\t\t</Nav.Link>\n\t\t\t\t\t\t</Nav>\n\t\t\t\t\t</Navbar>\n\n\t\t\t\t\t<ErrorModal\n\t\t\t\t\t\tshowError={this.state.showError}\n\t\t\t\t\t\terrorMsg={this.state.errorMsg}\n\t\t\t\t\t\tclearError={this.clearError}\n\t\t\t\t\t/>\n\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<UserInput\n\t\t\t\t\t\t\tclassName=\"userInput\"\n\t\t\t\t\t\t\tupdateData={this.updateData}\n\t\t\t\t\t\t\tpayload={this.state}\n\t\t\t\t\t\t\tupdateErrorMsg={this.updateErrorMsg}\n\t\t\t\t\t\t\tloading={this.state.loading}\n\t\t\t\t\t\t\tupdateLoading = {this.updateLoading}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tposition: \"absolute\",\n\t\t\t\t\t\t\tright: \"5%\",\n\t\t\t\t\t\t\ttop: \"12.5%\",\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t<RouteData\n\t\t\t\t\t\t\tclassName=\"routeData\"\n\t\t\t\t\t\t\tdata={this.state.data}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"./styles/index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}